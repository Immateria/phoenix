"use strict";(self.webpackChunk_phoenix_docs=self.webpackChunk_phoenix_docs||[]).push([[988],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3620:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={},l="Screen",o={unversionedId:"api/screen",id:"api/screen",title:"Screen",description:"Use Screen to access frame sizes and other screens on a multi-screen setup. Beware that a screen can get stale if you keep a reference to it and it is for instance disconnected while you do so.",source:"@site/docs/api/18-screen.md",sourceDirName:"api",slug:"/api/screen",permalink:"/phoenix/api/screen",draft:!1,editUrl:"https://github.com/kasper/phoenix/tree/master/docs/docs/api/18-screen.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{},sidebar:"sidebar",previous:{title:"Modal",permalink:"/phoenix/api/modal"},next:{title:"Space",permalink:"/phoenix/api/space"}},s={},c=[{value:"Interface",id:"interface",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"Instance Methods",id:"instance-methods",level:2},{value:"Optionals",id:"optionals",level:3},{value:"Example",id:"example",level:2}],p={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"screen"},"Screen"),(0,a.kt)("p",null,"Use Screen to access frame sizes and other screens on a multi-screen setup. Beware that a screen can get stale if you keep a reference to it and it is for instance disconnected while you do so."),(0,a.kt)("h2",{id:"interface"},"Interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Screen implements Identifiable, Iterable\n\n  static Screen main()\n  static Array<Screen> all()\n\n  String identifier()\n  Rectangle frame()\n  Rectangle visibleFrame()\n  Rectangle flippedFrame()\n  Rectangle flippedVisibleFrame()\n  Space currentSpace() // macOS 10.11+\n  Array<Space> spaces() // macOS 10.11+\n  Array<Window> windows(Map<String, AnyObject> optionals)\n\nend\n")),(0,a.kt)("h2",{id:"static-methods"},"Static Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"main()")," returns the screen containing the window with the keyboard focus"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"all()")," returns all screens, the first screen in this array corresponds to the primary screen for the system")),(0,a.kt)("h2",{id:"instance-methods"},"Instance Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"identifier()")," returns the UUID for the screen"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"frame()")," returns the whole frame for the screen, bottom left based origin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visibleFrame()")," returns the visible frame for the screen subtracting the Dock and Menu from the frame when visible, bottom left based origin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"flippedFrame()")," returns the whole frame for the screen, top left based origin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"flippedVisibleFrame()")," returns the visible frame for the screen subtracting the Dock and Menu from the frame when visible, top left based origin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"currentSpace()")," returns the current space for the screen (macOS 10.11+, returns ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," otherwise)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"spaces()")," returns all spaces for the screen (macOS 10.11+, returns an empty list otherwise)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"windows(Map<String, AnyObject> optionals)")," returns all windows for the screen if no optionals are given")),(0,a.kt)("h3",{id:"optionals"},"Optionals"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visible")," (boolean): if set ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," returns all visible windows for the screen, if set ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," returns all hidden windows for the screen")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Get all available screens\nconst screens = Screen.all();\n\n// Get visible frame for the main screen\nconst frame = Screen.main().visibleFrame();\n\n// Get all windows on the main screen\nScreen.main().windows();\n\n// Get all visible windows on the main screen\nScreen.main().windows({ visible: true });\n")))}u.isMDXComponent=!0}}]);