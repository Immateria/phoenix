#!/bin/bash

# Exit on error
trap 'exit' ERR

# Colours
reset=$(tput sgr0)
bold=$(tput bold)
blue=$(tput setaf 4)

app='Phoenix'
sign_update="$PWD/Pods/Sparkle/bin/sign_update"

# Unset arguments
unset username
unset code_sign_identity
unset dsa_signature_key_path
unset output_directory

# Helpers

help() {
  echo >&2 "\
${bold}Usage:${reset} $(basename $0) -u username -s code-sign-identity -d dsa-signature-key-path -o output-directory

Arguments:
  -u username               Apple Developer username for notarisation, password is obtained from keychain item “AC_PASSWORD”
  -s code-sign-identity     used to sign the app
  -d dsa-signature-key-path used to create the DSA-signature
  -o output-directory       where the app archive is created"
}

missing_argument() {
  echo >&2 "Option -$1 requires an argument."
}

non_existent_path() {
  echo >&2 "Path “$1” does not exist."
}

describe() {
  echo -e "\n${bold}${blue}${1}${reset}\n"
}

get_property() {
  /usr/libexec/PlistBuddy -c "Print $1" "$2"
}

get_build_setting() {
  xcodebuild -showBuildSettings | grep "$1" | tr -d "$1 = "
}

# Parse arguments
while getopts 'u:s:d:o:' opt; do
  case $opt in
    u) username=$OPTARG;;
    s) code_sign_identity=$OPTARG;;
    d) dsa_signature_key_path=$OPTARG;;
    o) output_directory=$OPTARG;;

    :)
      missing_argument $OPTARG
      exit 1
    ;;

    ?)
      help
      exit 1
    ;;
  esac
done

# Invalid arguments
if [ ! "$username" ] || [ ! "$code_sign_identity" ] || [ ! "$dsa_signature_key_path" ] || [ ! "$output_directory" ]; then
  help
  exit 1
fi

# Verify paths

if [ ! -f "$dsa_signature_key_path" ]; then
  non_existent_path "$dsa_signature_key_path"
  exit 1
fi

if [ ! -d "$output_directory" ]; then
  non_existent_path "$output_directory"
  exit 1
fi

# Build app

build_directory="$PWD/build"
version=$(get_build_setting 'MARKETING_VERSION')
build_number=$(get_build_setting 'CURRENT_PROJECT_VERSION')
notarisation_archive="phoenix-$version.zip"
notarisation_upload_plist='notarisation-upload.plist'
notarisation_info_plist='notarisation-info.plist'
archive="phoenix-$version.tar.gz"

if [ -f "$output_directory/$archive" ]; then
  echo "Archive “"$archive"” already exists. Exiting..."
  exit 1
fi

describe "Building $app..."

rm -rf $build_directory

xcodebuild -workspace $app.xcworkspace \
           -scheme $app \
           -configuration Release \
           -archivePath "$build_directory/$app.xcarchive" \
           CODE_SIGN_IDENTITY="$code_sign_identity" \
           clean archive

xcodebuild -archivePath "$build_directory/$app.xcarchive" \
           -exportArchive \
           -exportPath $build_directory \
           -exportOptionsPlist export.plist

# Verify app

describe 'Verifying signed app...'

cd $build_directory
codesign --verbose=4 --verify $app.app
spctl --verbose=4 --assess --type execute $app.app

# Notarise app

describe 'Notarising app...'

echo 'Creating archive for notarisation...'
ditto -c -k --keepParent $app.app $notarisation_archive

echo 'Uploading archive to notarisation service...'
xcrun altool --notarize-app \
             --primary-bundle-id 'org.khirviko.Phoenix' \
             --username $username \
             --password '@keychain:AC_PASSWORD' \
             --file $notarisation_archive \
             --output-format xml \
             > $notarisation_upload_plist

notarisation_request_uuid=$(get_property 'notarization-upload:RequestUUID' $notarisation_upload_plist)
echo "Uploaded. Request is “"$notarisation_request_uuid"”."

while :
do
  xcrun altool --notarization-info $notarisation_request_uuid \
               -u $username \
               -p '@keychain:AC_PASSWORD' \
               --output-format xml \
               > $notarisation_info_plist

  notarisation_status=$(get_property 'notarization-info:Status' $notarisation_info_plist)

  if [ "$notarisation_status" = 'success' ]; then
    notarisation_log=$(get_property 'notarization-info:LogFileURL' $notarisation_info_plist)
    echo "Notarisation succeeded. Log: $notarisation_log"
    break
  fi

  if [ "$notarisation_status" = 'invalid' ]; then
    notarisation_log=$(get_property 'notarization-info:LogFileURL' $notarisation_info_plist)
    echo "Notarisation failed. Log: $notarisation_log"
    exit 1
  fi

  echo "Current status is “"$notarisation_status"”. Waiting..."
  sleep 30
done

# Staple app

describe 'Stapling app...'

xcrun stapler staple $app.app

# Archive app

describe 'Archiving app...'

tar czf "$output_directory/$archive" $app.app
echo "Archived to “"$output_directory/$archive"”."
cd $output_directory

# Create DSA-signature

describe 'Creating DSA-signature for archive...'

dsa_signature=$(openssl dgst -sha1 -binary < $archive | openssl dgst -dss1 -sign "$dsa_signature_key_path" | openssl enc -base64)
echo "DSA: $dsa_signature"

# Create EdDSA-signature

describe 'Creating EdDSA-signature for archive...'

eddsa_signature=$($sign_update $archive | perl -ne '/sparkle:edSignature="(.+)" / && print $1')
echo "EdDSA: $eddsa_signature"

# Collect information

describe 'Collecting release information...'

echo "Date: $(LANG=en date '+%a, %d %b %Y %T %z')"
echo "Version: $version ($build_number)"
echo "Archive: $archive"
echo "Size: $(stat -f '%z' $archive)"
echo "SHA-256: $(shasum -a 256 $archive)"
echo "DSA signature: $dsa_signature"
echo "EdDSA signature: $eddsa_signature"

describe 'Done.'
