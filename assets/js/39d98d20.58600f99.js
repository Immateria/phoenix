"use strict";(self.webpackChunk_phoenix_docs=self.webpackChunk_phoenix_docs||[]).push([[458],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,y=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(y,l(l({ref:n},d),{},{components:t})):r.createElement(y,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9955:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={},c="Key",s={unversionedId:"api/key",id:"api/key",title:"Key",description:"Use Key to construct keys, bind callbacks, access their properties, and enable or disable them. You can have multiple handlers for a single key combination, however only one can be enabled at a time. Enabling a key combination that has been exclusively registered by another app will fail.",source:"@site/docs/api/12-key.md",sourceDirName:"api",slug:"/api/key",permalink:"/phoenix/api/key",editUrl:"https://github.com/kasper/phoenix/tree/master/docs/docs/api/12-key.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"sidebar",previous:{title:"Iterable",permalink:"/phoenix/api/iterable"},next:{title:"Event",permalink:"/phoenix/api/event"}},d=[{value:"Interface",id:"interface",children:[],level:2},{value:"Static Methods",id:"static-methods",children:[],level:2},{value:"Instance Properties",id:"instance-properties",children:[],level:2},{value:"Constructor",id:"constructor",children:[],level:2},{value:"Instance Methods",id:"instance-methods",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],u={toc:d};function p(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"key"},"Key"),(0,i.kt)("p",null,"Use Key to construct keys, bind callbacks, access their properties, and enable or disable them. You can have multiple handlers for a single key combination, however only one can be enabled at a time. Enabling a key combination that has been exclusively registered by another app will fail."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"keys"},"Keys")," for a list available keys for binding."),(0,i.kt)("h2",{id:"interface"},"Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class Key implements Identifiable\n\n  static int on(String key, Array<String> modifiers, Function callback)\n  static void once(String key, Array<String> modifiers, Function callback)\n  static void off(int identifier)\n\n  property String key\n  property Array<String> modifiers\n\n  constructor Key Key(String key, Array<String> modifiers, Function callback)\n  boolean isEnabled()\n  boolean enable()\n  boolean disable()\n\nend\n")),(0,i.kt)("h2",{id:"static-methods"},"Static Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"on(String key, Array<String> modifiers, Function callback)")," constructs a managed handler for a key and returns the identifier for the handler, for arguments see ",(0,i.kt)("inlineCode",{parentName:"li"},"new Key(...)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"once(String key, Array<String> modifiers, Function callback)")," constructs a managed handler for a key that is by default only triggered one time and then disabled, for more control you can explicitly return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," from the callback function and the handler will not be disabled until you return something else, for arguments see ",(0,i.kt)("inlineCode",{parentName:"li"},"new Key(...)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"off(int identifier)")," disables the managed handler for a key with the given identifier")),(0,i.kt)("h2",{id:"instance-properties"},"Instance Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," read-only property for the key character in lower case or case sensitive special key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modifiers")," read-only property for the key modifiers in lower case")),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"new Key(String key, Array<String> modifiers, Function callback)")," constructs and binds the key character with the specified modifiers (can be an empty list) to a callback function and returns the handler, you must keep a reference to the handler in order for your callback to get called, you can have multiple handlers for a single key combination, only one can be enabled at a time, any previous handler for the same key combination will automatically be disabled, the callback function receives its handler as the first argument and as the second argument a boolean that indicates if the key was repeated (key combination is held down)")),(0,i.kt)("h2",{id:"instance-methods"},"Instance Methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isEnabled()")," returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the key handler is enabled, by default ",(0,i.kt)("inlineCode",{parentName:"li"},"true")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enable()")," enables the key handler, any previous handler for the same key combination will automatically be disabled, returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if successful"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"disable()")," disables the key handler, returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if successful")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Bind Control + Shift + Q to a callback function\nKey.on('q', ['control', 'shift'], () => {\n  console.log('Key combination pressed.');\n});\n")))}p.isMDXComponent=!0}}]);